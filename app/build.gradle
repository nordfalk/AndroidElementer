apply plugin: 'com.android.application'

/*
 For at bruge Kotlin:
 1) Versionér og commit hele dit projekt
 2) Åbn en Java-klasse
 2) Vælg Code | Convert Java File to Kotlin File.
 3) Acceptér at der ændres i build-filerne.
 4) Lige under "apply plugin: 'kotlin-android'" indsætter du denne udvidelse, der giver automatisk view-binding og en masse andre gode ting:
                apply plugin: 'kotlin-android-extensions'
 5) Du får dine viewbindings i Kotlin-aktiviteter med f.eks. import kotlinx.android.synthetic.main.lekt01_tre_knapper.*
*/

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    // Benyt Java 8 så vi kan lave lambda-udtryk, f.eks. i BenytNetFraBaggrundstraad
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    defaultConfig {
        // app'ens pakkenavn - dens unikke ID på telefonen
        applicationId "dk.nordfalk.android.elementer"
        // denne app kan installeres på telefoner med Android 5.0 (API 21) og frem
        minSdkVersion 21
        // .... men den er blevet beregnet til Android 10.0 (API 29)
        targetSdkVersion 29

        versionCode 72
        versionName '2.9.5 juli 2020 - AsyncTask fjernet'
        testInstrumentationRunner = 'androidx.test.runner.AndroidJUnitRunner'

        // dette giver en hurtigere build, men med højere hukommelsesforbrug
        //dexOptions { javaMaxHeapSize "2g" }
    }

    // View binding - se lekt01_views.BenytKnapperDeklViewbinding og
    buildFeatures {
        viewBinding = true
    }

    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
    // For at kildekoden og alle resurserne (src/main) kan ses inde fra AndroidElementer
    // så kopierer vi dem fra src/main ind i assets-mappen (der normalt kun har src/main/assets)
    sourceSets { main { assets.srcDirs = ['src/main', 'src/main/assets'] } }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        //unitTests.returnDefaultValues = true
    }
}
dependencies {

    // Kompatibilitetsbiblioteker til bl.a. fragmenter
    implementation 'androidx.appcompat:appcompat:1.1.0'
    // Til eksemplet lekt06_asynkron.Asynk4ViewModel
    //implementation 'android.arch.lifecycle:extensions:2.1.0'

    // Navigation og venstremenu
    implementation 'androidx.navigation:navigation-fragment:2.3.0'
    implementation 'androidx.navigation:navigation-ui:2.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    // Vi benytter Google Play Services autoriseringsmodul og stedbestemmelses-modul
    implementation 'com.google.android.gms:play-services-auth:18.1.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'


    // Klientbibliotekerne til Google People API (https://developers.google.com/people/)
    // se lekt50_konti.HentBrugersKoenAlderTelefonEmail
    // implementation 'com.google.api-client:google-api-client-android:1.22.0'
    // implementation 'com.google.apis:google-api-services-people:v1-rev139-1.22.0'

    // Til afprøvning i standard JVM, dvs uden at køre emulator eller telefon (src/test)
    testImplementation 'junit:junit:4.12'
    // Brug Roboelectric til at simulere Android-miljø fra standard JVM
    testImplementation "org.robolectric:robolectric:4.3"
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'androidx.test:rules:1.2.0'

    // Til afprøvning i en emulator/fysisk telefon (src/androidTest)
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
}
